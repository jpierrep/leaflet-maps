<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <title>ClusterPies</title>


  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"/>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>




  <link rel="stylesheet" href="https://d19vzq90twjlae.cloudfront.net/leaflet-0.7.2/leaflet.css" />
  <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/MarkerCluster.css' rel='stylesheet' />
  <link rel="stylesheet" href="/clusterpies/clusterpies.css"/>


  <script src="https://d19vzq90twjlae.cloudfront.net/leaflet-0.7.2/leaflet.js" charset="utf-8"></script>
<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/leaflet.markercluster.js'></script>
<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<!--  utilizando leaflete 1.3 no permitia hacer clicks en iconos , estos plugins son compatibles con 0.7
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
crossorigin=""/>

<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
crossorigin=""></script>
-->

    
     


  



     <link  rel="stylesheet" href="/css/mapa.css"/>
     
     <link href="http://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" type="text/css"/>
     <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
      


     <link rel="stylesheet" href="/label/libs/leaflet/leaflet.css" />
     <!--[if lte IE 8]><link rel="stylesheet" href="../libs/leaflet/leaflet.ie.css" /><![endif]-->
     <link rel="stylesheet" href="/label/dist/leaflet.label.css" />
     
     <script src="/label/libs/leaflet/leaflet-src.js"></script>
     
     <script src="/label/src/Label.js"></script>
     <script src="/label/src/BaseMarkerMethods.js"></script>
     <script src="/label/src/Marker.Label.js"></script>
     <script src="/label/src/CircleMarker.Label.js"></script>
     <script src="/label/src/Path.Label.js"></script>
     <script src="/label/src/Map.Label.js"></script>
     <script src="/label/src/FeatureGroup.Label.js"></script>
  <style>
    html,
body {
height: 100%;
font-size: medium;
}
/*#mymap{width:1600px;height:800px} */
#map{
display: inline-block;
height: 100%;
width: 100%;

}
.column {
display: inline;
padding: 10px;
height: 100%;


}

.left {
width: 25%;
}

.right {
width: 75%;
}

#yellow {
height: 100%; 
/*background: yellow; */

}

table{width:100%;}
td{padding:24px; background:#eee;}

/*Para que el header de la tabla sea fijo*/
thead tr:nth-child(1) th{
background: white;
position: sticky;
top: 0;
z-index: 10;
}
 
</style>



</head>  
<body>

<!--
Aquí si se carga el script de leaflet, dejará sin efecto el leaflet cargado arriba
<script src="https://d19vzq90twjlae.cloudfront.net/leaflet-0.7.2/leaflet.js" charset="utf-8"></script>
<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/leaflet.markercluster.js'></script>
<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>

-->
<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/leaflet.markercluster.js'></script>

<h2 style="margin:0;padding: 10px;text-align:center;background-color: black ;color: white;">NO CONFORMIDADES PENDIENTES</h2>
<h2 style="margin:0;text-align:center;background-color: black ;color: white;"><%= (infoSupervisor['supervisor_id'] +" - " +infoSupervisor['supervisor_nombre']+" - "+infoSupervisor['supervisor_zona']).toUpperCase()%></h2>


 


  
<div class="container-fluid h-100">
  <div class="row justify-content-center h-100">
      <div class="col-4 hidden-md-down " style="overflow-y:auto;" id="yellow">
          <!--<div class="col-4 hidden-md-down" >  -->
        
          <div id="tabla-instalaciones" style=" height: 600px; overflow: auto;" >
              <table class="table table-hover" >
                  <thead>
                    <tr>
                      <th scope="col">CODIGO</th>
                      <th scope="col">INSTALACION</th>
                      <th scope="col">PEND. TOTALES</th>
                      <th scope="col">PEND. ULT. MES</th>
                      <th scope="col">RES. ULT. MES</th>
                      <th  style="display: none;"scope="col">Longitud</th>
                      <th style="display: none;" scope="col"> Latitud</th>
                     
                    </tr>
                  </thead>
                  <tbody>
                   
                    <% for (var x = 0;x < infoSupervisor['dataNCSupervisor'].length;x++){ %>
                      <tr>
                          <td> <a href="http://192.168.100.141/TouchServer/embed.html##NewLink?arg1=<%=infoSupervisor['dataNCSupervisor'][x]['cencos_codigo']%>"><%=infoSupervisor['dataNCSupervisor'][x]['cencos_codigo']%></a> </td>
                          <td><%=infoSupervisor['dataNCSupervisor'][x]['planta_nombre']%></td>
                          <td><%=infoSupervisor['dataNCSupervisor'][x]['CANT_NC_PENDIENTES']%></td>
                          <td><%=infoSupervisor['dataNCSupervisor'][x]['CANT_NC_ULT_MES']%></td>
                          <td><%=infoSupervisor['dataNCSupervisor'][x]['CANT_NC_RES_ULT_MES']%></td>
                          <td style="display: none;"><%=infoSupervisor['dataNCSupervisor'][x]['latitude']%></td>
                          <td style="display: none;"><%=infoSupervisor['dataNCSupervisor'][x]['longitude']%></td>

                        </tr>
                      <% }  %>  
                  </tbody>
                </table>
              
              </div>
        </div>

    <div class="col-10 col-sm-10 col-md-10 col-lg-8 col-xl-8">
    
      <div id="map" />
    </div>
  </div>
</div>





<script>
  "use strict"
  var geojson,
    metadata,
   // geojsonPath = 'traffic_accidents.geojson',
   geojsonPath = '/traffic_accidents.geojson',
    categoryField = '5074', //This is the fieldname for marker category (used in the pie and legend)
    iconField = '5065', //This is the fieldame for marker icon
    popupFields = ['5065','5055','5074'], //Popup will display these fields
    tileServer = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    tileAttribution = 'Map data: <a href="http://openstreetmap.org">OSM</a>',
    rmax = 30, //Maximum radius for cluster pies
    markerclusters = L.markerClusterGroup({
     maxClusterRadius: 2*rmax,
    // maxClusterRadius: 2,
     iconCreateFunction: defineClusterIcon //this is where the magic happens
    }),
    map = L.map('map').setView([59.95, 10.78], 8);
    
  //Add basemap
  L.tileLayer(tileServer, {attribution: tileAttribution,  maxZoom: 15}).addTo(map);
  //and the empty markercluster layer
  map.addLayer(markerclusters);
  
  //Ready to go, load the geojson
 // d3.json(geojsonPath, function(error, data) {
     // if (!error) {
         // geojson = data;
         geojson =  JSON.parse('<%-JSON.stringify(geoJSON)%>') //var test is now assigned to getTest which will only work on browsers
      var   plantasGeoJSON =  JSON.parse('<%-JSON.stringify(plantasGeoJSON)%>')
         
         metadata = geojson.properties;
          var markers = L.geoJson(geojson, {
			pointToLayer: defineFeature,
			onEachFeature: defineFeaturePopup
          });
          markerclusters.addLayer(markers);
       //***********************   map.fitBounds(markers.getBounds());
          map.attributionControl.addAttribution(metadata.attribution);
          renderLegend();
     // } else {
	 // console.log('Could not load data...');
     // }
 // });

function defineFeature(feature, latlng) {
  var categoryVal = feature.properties[categoryField],
    iconVal = feature.properties[iconField];
    var myClass = 'marker category-'+categoryVal+' icon-'+iconVal;
    var myIcon = L.divIcon({
        className: myClass,
        iconSize:null
    });
    return L.marker(latlng, {icon: myIcon});
}

function defineFeaturePopup(feature, layer) {
  var props = feature.properties,
    fields = metadata.fields,
    popupContent = '';
    
  popupFields.map( function(key) {
    if (props[key]) {
      var val = props[key],
        label = fields[key].name;
      if (fields[key].lookup) {
        val = fields[key].lookup[val];
      }
      popupContent += '<span class="attribute"><span class="label">'+label+':</span> '+val+'</span>';
    }
  });
  popupContent = '<div class="map-popup">'+popupContent+'</div>';
  layer.bindPopup(popupContent,{offset: L.point(1,-2)});
}

function defineClusterIcon(cluster) {
    var children = cluster.getAllChildMarkers(),
        n = children.length, //Get number of markers in cluster
        strokeWidth = 1, //Set clusterpie stroke width
        r = rmax-2*strokeWidth-(n<10?12:n<100?8:n<1000?4:0), //Calculate clusterpie radius...
        iconDim = (r+strokeWidth)*2, //...and divIcon dimensions (leaflet really want to know the size)
        data = d3.nest() //Build a dataset for the pie chart
          .key(function(d) { return d.feature.properties[categoryField]; })
          .entries(children, d3.map),
        //bake some svg markup
        html = bakeThePie({data: data,
                            valueFunc: function(d){return d.values.length;},
                            strokeWidth: 1,
                            outerRadius: r,
                            innerRadius: r-10,
                            pieClass: 'cluster-pie',
                            pieLabel: n,
                            pieLabelClass: 'marker-cluster-pie-label',
                            pathClassFunc: function(d){return "category-"+d.data.key;},
                            pathTitleFunc: function(d){return metadata.fields[categoryField].lookup[d.data.key]+' ('+d.data.values.length+' accident'+(d.data.values.length!=1?'s':'')+')';}
                          }),
        //Create a new divIcon and assign the svg markup to the html property
        myIcon = new L.DivIcon({
            html: html,
            className: 'marker-cluster', 
            iconSize: new L.Point(iconDim, iconDim)
        });
    return myIcon;
}

/*function that generates a svg markup for the pie chart*/
function bakeThePie(options) {
    /*data and valueFunc are required*/
    if (!options.data || !options.valueFunc) {
        return '';
    }
    var data = options.data,
        valueFunc = options.valueFunc,
        r = options.outerRadius?options.outerRadius:28, //Default outer radius = 28px
        rInner = options.innerRadius?options.innerRadius:r-10, //Default inner radius = r-10
        strokeWidth = options.strokeWidth?options.strokeWidth:1, //Default stroke is 1
        pathClassFunc = options.pathClassFunc?options.pathClassFunc:function(){return '';}, //Class for each path
        pathTitleFunc = options.pathTitleFunc?options.pathTitleFunc:function(){return '';}, //Title for each path
        pieClass = options.pieClass?options.pieClass:'marker-cluster-pie', //Class for the whole pie
        pieLabel = options.pieLabel?options.pieLabel:d3.sum(data,valueFunc), //Label for the whole pie
        pieLabelClass = options.pieLabelClass?options.pieLabelClass:'marker-cluster-pie-label',//Class for the pie label
        
        origo = (r+strokeWidth), //Center coordinate
        w = origo*2, //width and height of the svg element
        h = w,
        donut = d3.layout.pie(),
        arc = d3.svg.arc().innerRadius(rInner).outerRadius(r);
        
    //Create an svg element
    var svg = document.createElementNS(d3.ns.prefix.svg, 'svg');
    //Create the pie chart
    var vis = d3.select(svg)
        .data([data])
        .attr('class', pieClass)
        .attr('width', w)
        .attr('height', h);
        
    var arcs = vis.selectAll('g.arc')
        .data(donut.value(valueFunc))
        .enter().append('svg:g')
        .attr('class', 'arc')
        .attr('transform', 'translate(' + origo + ',' + origo + ')');
    
    arcs.append('svg:path')
        .attr('class', pathClassFunc)
        .attr('stroke-width', strokeWidth)
        .attr('d', arc)
        .append('svg:title')
          .text(pathTitleFunc);
                
    vis.append('text')
        .attr('x',origo)
        .attr('y',origo)
        .attr('class', pieLabelClass)
        .attr('text-anchor', 'middle')
        //.attr('dominant-baseline', 'central')
        /*IE doesn't seem to support dominant-baseline, but setting dy to .3em does the trick*/
        .attr('dy','.3em')
        .text(pieLabel);
    //Return the svg-markup rather than the actual element
    return serializeXmlNode(svg);
}

/*Function for generating a legend with the same categories as in the clusterPie*/
function renderLegend() {
    var data = d3.entries(metadata.fields[categoryField].lookup),
      legenddiv = d3.select('body').append('div')
        .attr('id','legend');
        
    var heading = legenddiv.append('div')
        .classed('legendheading', true)
      //  .text(metadata.fields[categoryField].name);
     .text('Materias');
    var legenditems = legenddiv.selectAll('.legenditem')
        .data(data);
        
    legenditems
        .enter()
        .append('div')
        .attr('class',function(d){return 'category-'+d.key;})
        .classed({'legenditem': true})
        .text(function(d){return d.value;});
}

/*Helper function*/
function serializeXmlNode(xmlNode) {
    if (typeof window.XMLSerializer != "undefined") {
        return (new window.XMLSerializer()).serializeToString(xmlNode);
    } else if (typeof xmlNode.xml != "undefined") {
        return xmlNode.xml;
    }
    return "";
}


//MARCADORES DE PLANTAS
let baseRadius=8
var customLayer = L.geoJson(plantasGeoJSON, {
                pointToLayer : function(feature,latlng){
                    console.log("hii") 
                let geojsonMarkerOptions = {
                radius: baseRadius,
             //   fillColor: colorRadio,
                  fillColor:'#00487d',
                color:  '#be1010',
                weight: 1,
                opacity: 1,
                fillOpacity: 0.8
                };

             /*   if (feature.properties.CANT_AUDITORIAS==0){
                    if (feature.properties.CANT_VISITAS>0){
                    geojsonMarkerOptions.fillColor='yellow'
                }else{
                    geojsonMarkerOptions.fillColor='red'
                }
                }
*/
                   

                return L.circleMarker(latlng, geojsonMarkerOptions);
                }
                ,onEachFeature:function(feature,layer){
                    console.log("holaa")  
                    var label=`<p style='font-weight: bold;'>`+feature.properties.cenco2_codi+" "+feature.properties.name+`</p> <p> <br> Supervisor: `   +feature.properties.administrativo_nombre+`</p>`
              //layer.bindPopup(label)
          layer.bindLabel(feature.properties.cenco2_codi, { noHide: true })   
             console.log("leyer",layer)

            // layer.bindPopup(feature.properties.cenco2_codiL);
 // layer.bindTooltip(feature.properties.cenco2_codi);

              }
                
                }).addTo(map);
                map.fitBounds(customLayer.getBounds());



               ////script para recorrido dinamico de la tabla 


                let tabledata= []
                $("table tr").each(function(index,tr) {
                tabledata.push($("table tr").eq(index).position())
                

                })
            


loop();


//crea circulos de color
function loop() {
var count=0
var locations=[1]
                $("table tr").each(function(index,tr) {
 console.log("test")
    
    
    setTimeout(function() {

        var longitude=  $(tr).find("td").eq(6).html()  
   var latitude=$(tr).find("td").eq(5).html()          
     var   location = L.circleMarker([latitude,longitude], {radius: 50,color:'black'});
             location.addTo(map)
             locations.push(location)
             console.log(locations)
      
      map.removeLayer(locations[locations.length-2]);
      // marker2.removeFrom(map)

      $("table tr").eq(index-1).find("td").css('background-color','white')
        $("table tr").eq(index-1).find("td").css('color','black')
      //  $(tr).find("td").css('background-color','white')
     //   $(".testBox").append('<p class="box">' + value + '</p>');
     console.log(tr)
     console.log("hole")
    //var s = $("table tbody > tr:nth-child("+(index+2)+")").position();

     
    //var myFeatureGroup = L.featureGroup().addTo(mymap);
    //console.log(myFeatureGroup.getLayers())
    //myFeatureGroup.clearLayers();
   // mymap.removeLayer(myFeatureGroup) 
    
   // var circlemark = L.circleMarker([latitude,longitude], {radius: 50,color:'green'}).addTo(myFeatureGroup);

   
  
  // var w = $(window);
//w.scrollTop( $(tr).offset().top - (w.height()/3) );



   $(tr).find("td").css('background-color','black')
   $(tr).find("td").css('color','white')


   //var s =$("table tr").eq(index+1).position();
  // var s =$("table tr").eq(index+1).position();
  
  //aquí se controla la planta visible en el loop
  //var s=tabledata[index-1]
  var s=tabledata[index-2]

   // console.log("table tbody > tr:nth-child("+(index+2)+")",s)
   console.log("Index actual",index)
   console.log("Index",$("table tr").eq(index).position())
   console.log("table aa",$( '#tabla-instalaciones' ).prop("scrollHeight"))
   console.log("tabledata",tabledata)
   //debugger;
  // $( '#tabla-instalaciones' ).scrollTop(300);
if(s){
$( '#tabla-instalaciones' ).scrollTop(s.top);
}

if (index==$("table tr").length-1){
    $("table tr").eq(index).find("td").css('background-color','white')
    $("table tr").eq(index).find("td").css('color','black')
    map.removeLayer(locations[locations.length-1]);
    loop();
}

      }, count * 2500)
     //esto se hace acá pues no es asincrono, la funcion se llama automaticamente con todos los tiempos como corresponden
      count++;


  
  });
}



</script>